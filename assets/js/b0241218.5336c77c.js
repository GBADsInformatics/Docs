"use strict";(self.webpackChunkdocumentation_server=self.webpackChunkdocumentation_server||[]).push([[5279],{3905:(e,a,t)=>{t.d(a,{Zo:()=>d,kt:()=>c});var n=t(7294);function o(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){o(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,o=function(e,a){if(null==e)return{};var t,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(o[t]=e[t]);return o}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){var a=n.useContext(l),t=a;return e&&(t="function"==typeof e?e(a):s(s({},a),e)),t},d=function(e){var a=p(e.components);return n.createElement(l.Provider,{value:a},e.children)},u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},h=n.forwardRef((function(e,a){var t=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),h=p(t),c=o,m=h["".concat(l,".").concat(c)]||h[c]||u[c]||r;return t?n.createElement(m,s(s({ref:a},d),{},{components:t})):n.createElement(m,s({ref:a},d))}));function c(e,a){var t=arguments,o=a&&a.mdxType;if("string"==typeof e||o){var r=t.length,s=new Array(r);s[0]=h;var i={};for(var l in a)hasOwnProperty.call(a,l)&&(i[l]=a[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<r;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}h.displayName="MDXCreateElement"},11:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=t(7462),o=(t(7294),t(3905));const r={sidebar_position:8},s="Data User Guide",i={unversionedId:"Data-Governance-Handbook-for-GBADs/dataUsers",id:"Data-Governance-Handbook-for-GBADs/dataUsers",title:"Data User Guide",description:"The GBADs data portal is a prototype dashboard that allows users to access datasets from FAOSTAT and OIE WAHIS. The prototype allows you to select data of interest, visualize it on bar line graphs, download the data in .csv and .json format and see the Application Programming Interface (API) call.",source:"@site/docs/Data-Governance-Handbook-for-GBADs/dataUsers.md",sourceDirName:"Data-Governance-Handbook-for-GBADs",slug:"/Data-Governance-Handbook-for-GBADs/dataUsers",permalink:"/Data-Governance-Handbook-for-GBADs/dataUsers",draft:!1,tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Data Contributor Guide",permalink:"/Data-Governance-Handbook-for-GBADs/dataContributors"},next:{title:"Metadata Storage: Graph Databases in GBADs",permalink:"/Data-Governance-Handbook-for-GBADs/metadataStorage"}},l={},p=[{value:"Getting started with our API",id:"getting-started-with-our-api",level:2},{value:"What is an API?",id:"what-is-an-api",level:3},{value:"Your workflow and APIs",id:"your-workflow-and-apis",level:3},{value:"Using the GBADs API",id:"using-the-gbads-api",level:3},{value:"Creating a User Profile",id:"creating-a-user-profile",level:2}],d={toc:p};function u(e){let{components:a,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},d,t,{components:a,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"data-user-guide"},"Data User Guide"),(0,o.kt)("p",null,"The ",(0,o.kt)("a",{parentName:"p",href:"http://gbadske.org:8050/dash/page-1/"},"GBADs data portal")," is a prototype dashboard that allows users to access datasets from ",(0,o.kt)("a",{parentName:"p",href:"http://www.fao.org/faostat/en/"},"FAOSTAT")," and ",(0,o.kt)("a",{parentName:"p",href:"https://wahis.oie.int/"},"OIE WAHIS"),". The prototype allows you to select data of interest, visualize it on bar line graphs, download the data in ",(0,o.kt)("inlineCode",{parentName:"p"},".csv")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".json")," format and see the Application Programming Interface (API) call. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{margin}"},"**What is `.json`?**\n\n[JSON](https://en.wikipedia.org/wiki/JSON) stands for JavaScript Object Notation. JSON is a file format that stores data in a standard structured format, allowing data to be both human and machine readable. JSON data can be read into all programming languages, and can be parsed into `excel`. JSON data is readable and easier to parse than other file formats such as [XML](https://en.wikipedia.org/wiki/XML).\n\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{margin}"},"```{admonition} We want to hear from you! \n:class: tip\n\nPlease note that this page will be updated as we continue to improve our data portal, and gain access to more data sources. We welcome feedback on what you like about the system, what you'd like to see and anything that you think could be more clear! \n```\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{admonition}",metastring:"Learning Objectives",Learning:!0,Objectives:!0},"* Readers should understand what an API is, how it works, and why GBADs is using APIs\n* Readers should understand how to use the GBADs API to get FAOSTAT and OIE WAHIS data \n* Readers should understand how to use the GBADs API to read data into their `R` and `python` programs\n")),(0,o.kt)("h2",{id:"getting-started-with-our-api"},"Getting started with our API"),(0,o.kt)("h3",{id:"what-is-an-api"},"What is an API?"),(0,o.kt)("p",null,"An Application Programming Interface (API) is a machine-to-machine way to ask a server for data, get the server retrieve and interpret the data and return it to your machine. APIs are everywhere; they allow applications to 'talk' to each other. For example, when you check the weather on a weather app, the app is using an API to grab the data and present it in a usable and interpretable fashion on your phone. APIs provide the most up-to-date data without having to store data on your own machine. "),(0,o.kt)("p",null,"For the data needs of GBADs, APIs work like this: "),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"You/your program requests data through the API call"),(0,o.kt)("li",{parentName:"ol"},"The webserver looks through its internal database for the data that you asked for "),(0,o.kt)("li",{parentName:"ol"},"The database gives the server the data that you asked for "),(0,o.kt)("li",{parentName:"ol"},"The data is returned to you/your program")),(0,o.kt)("h3",{id:"your-workflow-and-apis"},"Your workflow and APIs"),(0,o.kt)("p",null,"To explain the concept of an API in more depth, we will discuss the common workflow to access data for modelling and where APIs come into play."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Manual data accrual method")),(0,o.kt)("p",null,"If you are not using APIs in your current workflow, accessing data likely consists of navigating to a data portal or source, looking through the data catalogue or searching for a data set of your interest and then downloading the data. Each time the data is updated you have to repeat the process, find the data, download it again, import the file into your model and rerun with the updated numbers. While this workflow works, using APIs can eliminate the manual work of going to the website and getting the data everytime you need it. "),(0,o.kt)("p",null,"When you are interacting with the website to get the data you would like, you are likely indirectly interacting with an API, which is working in the backend to get the data that you've selected and present it back to the webpage. However, you can use an ",(0,o.kt)("strong",{parentName:"p"},"API call")," to request data from the server where the data of interest resides {numref}",(0,o.kt)("inlineCode",{parentName:"p"},"APIcall"),". "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{margin}"},"An **API call** is the way that you ask a server for data. \n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Using APIs to get data")," "),(0,o.kt)("p",null,"Instead of manually downloading data from a website each time, you can incorporate API calls into your work flow to request the most up-to-date data from the source. This allows you to rerun code without having to change your code. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{figure}",metastring:"/images/API.png","/images/API.png":!0},":name: APIcall\n\nSimple breakdown of how an API works. \n")),(0,o.kt)("p",null,"Once you have this 'API call' you can simply input into the program of your choice and automate your workflows and have access to the data without having to search through data catalogues each time. APIs are built on HTTP protocols, providing another plus: you can use APIs with virtually any programming language including R and Python, which are the most popular among our current users. This means that instead of loading data files into your R or python program each time, you can simply access the API right in your program. An added benefit is that this allows you to rerun your programs without having to download data from your sources each time that source is updated or modified."),(0,o.kt)("p",null,"Some data sources that GBADs uses such as FAOSTAT and The World Bank have APIs that can be used to get data. However, GBADs is handling the API management by developing an API that can request data from other APIs ({numref}",(0,o.kt)("inlineCode",{parentName:"p"},"GBADsAPI"),")."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{figure}",metastring:"/images/GBADsAPI.png","/images/GBADsAPI.png":!0},":name: GBADsAPI\n\nOverview of GBADs API infrastructure. The GBADs API can communicate with various other open APIs to access data from other data stores, such as FAOSTAT. The GBADs API also allows data to be requested from the GBADs data store. Users can access data from various sources through an API call to GBADs API. \n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{margin}"},"```{admonition} Special Access Data\n:class: tip\n\n_Please note that some data is not publicly available, and therefore is not available to all users_. See [the chapter on Data Licenses, Privacy and Security](http://www.gbadske.org/Documentation/DataGovernanceHandbook/dataOwnership.html) for more information about how GBADs handles confidential and sensitive data. \n```\n")),(0,o.kt)("h3",{id:"using-the-gbads-api"},"Using the GBADs API"),(0,o.kt)("p",null,"You can check out our more extensive API documentation ","[FIXME here]",". However, this section will show you the basics of using our API to fetch some data. "),(0,o.kt)("p",null,"We will provide two examples of API calls to the GBADs API. One in Python, and one in R. In both examples we will use the same API call which will give you stock price of chickens in Ethiopia from 2005 and 2018 from the FAO. Our API call for this type of data is: ",(0,o.kt)("a",{parentName:"p",href:"http://35.183.203.15:8000/gbads/LiveAnimals/?year_start=2005&year_end=2018&element=Stocks&item=Chickens"},"http://35.183.203.15:8000/gbads/LiveAnimals/?year_start=2005&year_end=2018&element=Stocks&item=Chickens")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{margin}"},"You will notice that if you put the API call directly in your browser you will be brought to a page with the data in JSON format. You'll also notice that the API call specifies the category (LiveAnimals), the start and end year, the element, which are the stock prices and the item, Chickens. Currently our portal only supports the retrieval of Ethiopian data as that is the focus of our pilot study.\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{note}"},"We are still developing our metadata API. \n")),(0,o.kt)("p",null,"In our Python use case you will need three libraries downloaded: ",(0,o.kt)("inlineCode",{parentName:"p"},"json"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"requests")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"pandas"),".  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{code-cell}",metastring:"ipython3",ipython3:!0},'import json\nimport requests\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Create apiCall\napiCall = "http://15.223.72.239:8000/gbads/LiveAnimals/?year_start=2005&year_end=2018&element=Stocks&item=Chickens"\n\nresponse = requests.get(apiCall).json()\n\n# Print the response so we can see what we got. \nprint(response)\n')),(0,o.kt)("p",null,"In some cases, you may want to convert your response to a ",(0,o.kt)("inlineCode",{parentName:"p"},"pandas")," dataframe, visualize the result, or save the result to a csv file. Below we will demonstrate how you can accomplish each of the following: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{code-cell}",metastring:"ipython3",ipython3:!0},"# Create pandas dataframe from api response\nresponse = pd.DataFrame(response)\n\n# What is our result? Print the first 10 rows of the dataframe.\nprint(response.head(10))\n")),(0,o.kt)("p",null,"Before we go ahead and graph this data, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"pandas"),"  to get a general overview of the data that we got from the api call."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{code-cell}",metastring:"ipython3",ipython3:!0},"# Which columns do we have? \nprint(response.columns)\n")),(0,o.kt)("p",null,"We can also see summaries of the columns: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{code-cell}",metastring:"ipython3",ipython3:!0},"response.describe()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{code-cell}",metastring:"ipython3",ipython3:!0},"# Graph time!\nresponse.plot.scatter(x='Year',\n    y='Value',\n    c='DarkBlue')\n")),(0,o.kt)("p",null,"And for fun, lets visualize a linear relationship through ",(0,o.kt)("inlineCode",{parentName:"p"},"seaborn"),"'s linear regression function. The function provides a regression line on a plot with a 95% confidence interval. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{code-cell}",metastring:"ipython3",ipython3:!0},'\nax = sns.regplot(x="Year", y="Value", data=response)\n\n# Set axis labels \nax.set(xlabel=\'Year\', ylabel=\'Number of Live Animals (1000 Heads)\')\n\n# Add a title \nplt.title("Number of Live Chickens in Ethiopia")\n\n# Show the result\nplt.show(ax)\n\n')),(0,o.kt)("p",null,"As you can see, with very little work we have gathered the data from the API, converted into a ",(0,o.kt)("inlineCode",{parentName:"p"},"pandas")," dataframe, and plotted a regression. "),(0,o.kt)("p",null,"We could also plot the data and visualize which points correspond to official data, and which were imputted: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-{code-cell}",metastring:"python3",python3:!0},'# Different colours for the flag descriptions\nsns.scatterplot(x="Year", y="Value", hue="Flag Description", data=response)\n\n# Set axis labels \nax.set(xlabel=\'Year\', ylabel=\'Number of Live Animals (1000 Heads)\')\n\n# Add a title \nplt.title("Number of Live Chickens in Ethiopia")\n\n# Show the result\nplt.show(ax)\n\n')),(0,o.kt)("p",null,"If you are interested in simply gathering the data from the API and saving it as a csv, you can use the code below to do so."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"import json\nimport requests\nimport pandas as pd\n\n# Create apiCall\napiCall = \"http://15.223.72.239:8000/gbads/LiveAnimals/?year_start=2005&year_end=2018&element=Stocks&item=Chickens\"\n\nresponse = requests.get(apiCall).json()\n\n# Encoding/decoding dataframe to get it in csv format\nresponse = response.to_json(orient='split')\nresponse = pd.read_json(response,orient='split')\n\n# Name of outfile. Replace this with the path to where you would like to store the file, and the filename. \noutfile = 'path/to/outfile/outfilename.csv'\n\n# Save to outfile using pandas \nresponse.to_csv(outfile, index=False)\n")),(0,o.kt)("p",null,"Here's our R implementation: "),(0,o.kt)("p",null,"You will need to make sure that you have the ",(0,o.kt)("inlineCode",{parentName:"p"},"httr")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"jsonlite")," R packages downloaded. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'# Uncomment the line below if you don\'t already have the libraries \n# install.packages(c("httr", "jsonlite"))\n\n# Load in libraries \nlibrary(httr)\nlibrary(jsonlite)\n\n# Create API call\napiCall = "http://15.223.72.239:8000/gbads/LiveAnimals/?year_start=2005&year_end=2018&element=Stocks&item=Chickens"\n\n# Send request\nresponse = GET(apiCall)\n\n# See what the response gives us\nresponse\n\n# Create a dataframe from the API response \ndata = fromJSON(rawToChar(response$content))\n\n# Check to make sure that worked \nclass(data)\n\n# See what the first 5 rows of the data look like \nhead(data)\n')),(0,o.kt)("h2",{id:"creating-a-user-profile"},"Creating a User Profile"),(0,o.kt)("p",null,"The guide above allows you to access the API, which allows access to open data. In the future, we anticipate private data sources which you will only have access to if you are given permissions. Our system will support the ability to create a verified user log in, which will give you access to the private sources you are granted access to via a personalized portal and API key."))}u.isMDXComponent=!0}}]);